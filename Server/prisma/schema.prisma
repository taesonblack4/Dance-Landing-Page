// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/**
 * **************** Default *******************
 */
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ***************** Admin  ********************
 */
model Super {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Leads {
  id           Int      @id @default(autoincrement())
  full_name    String
  email        String
  phone_number String
  services     String[]
  technique    String[]
  message      String
  submitted_at DateTime @default(now())
}

/**
 * ****************** User **********************
 */

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  password     String
  full_name    String?
  title        String[]
  email        String?
  phone_number String?
  location     String?
  services     String[]
  technique    String[]
  notes        String?
  experience   String?
  age          Int?
  birthday     DateTime?
  creationDate DateTime  @default(now())
  goals        Goal[]
}

/**
 * *************** Shared View *******************
 */
// Announcements and Promotions ; generated by Admin , viewed by all
model Post {
  id         Int       @id @default(autoincrement())
  type       String
  title      String
  content    String
  category   String[]
  audience   String[]
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

// Goal tracking for Users , generated by users , viewed by admin and specific user
// Enums for clarity and data consistency
enum GoalStatus {
  not_started
  in_progress
  completed
  paused
  cancelled
}

enum GoalCategory {
  technique
  physical
  choreography
  performance
}

model Goal {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  status      GoalStatus    @default(in_progress)
  category    GoalCategory?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}
